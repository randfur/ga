# 2025-09-15
- Added Vec3.setAddXyz() and inplaceAddXyz().
- Added Vec3.setLerp() and inplaceLerp().

# 2025-08-23
- Added setRotateXy(), setRotateYz(), setRotateZx() to Mat4.
  - Should maybe add inplace transform methods.
  - Give option to multiply on left or right?
  - Probably only on right, not sure of adequate naming though.
  - inplaceMultiplyRightRotateXy()? So verbose.
  - imrRotateXy()? Hmm...
- Added set3dPlanePosition() as an inverse to set2dPlaneProjection().
- Updated setNonParallel() to give a nicer answer for PlaneBasis.set() such that a list of points in the XY plane going counter clockwise like a unit circle would produce a plane basis in the same handed-ness and with X->Y going counter clockwise as well.
- Updated set2dPlaneProjection() to take into account the plane position and added setRelative2dPlaneProjection() and setRelative3dPlanePosition().
- Renamed PlaneBasis.position to PlaneBasis.origin as it represents the origin point within the plane's local 2D co-ordinate space.
- Grouped and reordered the set*Plane*() methods around.
- Renamed "position" parameters to "v" for general consistency with earlier methods.
- Killed setNormalProjection(), nothing's using it.
  - Oops, actually the inplaceNormalProjection is used; restored.
- Updated PlaneBasis.xDirection calculation:
  - It was originally:
    this.xDirection
      .setNonParallel(this.normal)
      .inplaceRelativePlaneProjection(PlaneBasis.#origin, this.normal)
      .inplaceNormalise();
  - Where PlaneBasis.#origin was (0, 0, 0).
  - This could have used inplaceNormalProjection().
  - Actually Vec3.setOrthogonal() already does all this.
    - Fixed typo in this function.


# 2025-08-21
- Added setPolarXy().
- Removed use of Rotor3.temp() in Vec3.setRotateRotor().
  - Oops, can't do this because circular class static dependencies.
- Added PlaneBasis class.
- Added TODOs for testing.

# 2025-08-10
- Added projection and getting orthogonal vectors and cross product.
  - All needs testing.

# 2025-08-04
- Added some plane projection methods to Vec3.
  - Need to add tests.
- Thinking about creating a Vec2 with some plane basis vector helpers.

# 2025-08-01
- Idea for making Temp more extensible.
  - Have classes register themselves with it for their own storage.
  - Keep reclaimAll() method to reset all registered storage.
  - Rename from Temp to MemoryArena to match memory model concept?
    - Nah, more vague than Temp in communicating intention.
- Implemented and updated all three primitives.
  - Updated tests to include Temp.
- Had resetValue() as registered function to reset temp values.
  - Removed, each client's temp getter can do the resetting as they wish and optionally take parameters to decide what to reset to.
  - Much simpler client code.

# 2023-11-20
- Added scale to Mat4.
- Added turn around to Rotor3.
  - Needs to take two right angle vectors to know the plane to turn around in.
  - Just does a double right angle turn.

# 2023-11-19
- Added more matrix tests.
  - Combining translations and rotations appears to work as expected using left multiplication.
- Added exporting to array buffers for Mat4.
  - Exporting as column major.
  - Need to find documentation for this.
  - Supposedly this is how WebGL accepts matrices.
  - Having thoroughly tested the theory.
- Added x, y, z convenience helpers to Temp.
  - Not too sure if it's that useful but should be eventually.
- Fixed Rotor3 not specifying which side inplace multiplication happens on.
- Fixed Vec3 not having default values.

# 2023-11-18
- Geometric algebra library for 3D stuff.
- Vec3, Rotor3, Mat4 classes.
- Vec3 and Rotor3 mostly written already in the ember experiment, will pull in.
- Writing up Mat4 implementation.
  - First thing to add is Rotor3 -> Mat4 conversion.
  - Multicursor algebraic expansion.
  - Using aa, ab, ac, etc. format for components.
  - Works very well with multicursor manipulation.
  - Can copy the letters a, b, c, d into four cursors and paste them in batches where they're needed.
- Added Vec3 and Rotor3.
- Added testing framework, added some tests.
  - Most bugs in forgetting to return this.
  - One bug in multiply, not sure how abdd was used at some point.